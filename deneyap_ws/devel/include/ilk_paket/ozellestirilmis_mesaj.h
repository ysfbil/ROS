// Generated by gencpp from file ilk_paket/ozellestirilmis_mesaj.msg
// DO NOT EDIT!


#ifndef ILK_PAKET_MESSAGE_OZELLESTIRILMIS_MESAJ_H
#define ILK_PAKET_MESSAGE_OZELLESTIRILMIS_MESAJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ilk_paket
{
template <class ContainerAllocator>
struct ozellestirilmis_mesaj_
{
  typedef ozellestirilmis_mesaj_<ContainerAllocator> Type;

  ozellestirilmis_mesaj_()
    : sensorGirisAdi()
    , sensorDegeri(0)
    , durumu(false)  {
    }
  ozellestirilmis_mesaj_(const ContainerAllocator& _alloc)
    : sensorGirisAdi(_alloc)
    , sensorDegeri(0)
    , durumu(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sensorGirisAdi_type;
  _sensorGirisAdi_type sensorGirisAdi;

   typedef int32_t _sensorDegeri_type;
  _sensorDegeri_type sensorDegeri;

   typedef uint8_t _durumu_type;
  _durumu_type durumu;





  typedef boost::shared_ptr< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> const> ConstPtr;

}; // struct ozellestirilmis_mesaj_

typedef ::ilk_paket::ozellestirilmis_mesaj_<std::allocator<void> > ozellestirilmis_mesaj;

typedef boost::shared_ptr< ::ilk_paket::ozellestirilmis_mesaj > ozellestirilmis_mesajPtr;
typedef boost::shared_ptr< ::ilk_paket::ozellestirilmis_mesaj const> ozellestirilmis_mesajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator1> & lhs, const ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator2> & rhs)
{
  return lhs.sensorGirisAdi == rhs.sensorGirisAdi &&
    lhs.sensorDegeri == rhs.sensorDegeri &&
    lhs.durumu == rhs.durumu;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator1> & lhs, const ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ilk_paket

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "840aae7739efcc5ed7df9d06667d6e29";
  }

  static const char* value(const ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x840aae7739efcc5eULL;
  static const uint64_t static_value2 = 0xd7df9d06667d6e29ULL;
};

template<class ContainerAllocator>
struct DataType< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ilk_paket/ozellestirilmis_mesaj";
  }

  static const char* value(const ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string sensorGirisAdi\n"
"int32 sensorDegeri\n"
"bool durumu\n"
;
  }

  static const char* value(const ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensorGirisAdi);
      stream.next(m.sensorDegeri);
      stream.next(m.durumu);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ozellestirilmis_mesaj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ilk_paket::ozellestirilmis_mesaj_<ContainerAllocator>& v)
  {
    s << indent << "sensorGirisAdi: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sensorGirisAdi);
    s << indent << "sensorDegeri: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensorDegeri);
    s << indent << "durumu: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.durumu);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ILK_PAKET_MESSAGE_OZELLESTIRILMIS_MESAJ_H
