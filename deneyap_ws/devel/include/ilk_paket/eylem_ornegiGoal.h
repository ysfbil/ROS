// Generated by gencpp from file ilk_paket/eylem_ornegiGoal.msg
// DO NOT EDIT!


#ifndef ILK_PAKET_MESSAGE_EYLEM_ORNEGIGOAL_H
#define ILK_PAKET_MESSAGE_EYLEM_ORNEGIGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ilk_paket
{
template <class ContainerAllocator>
struct eylem_ornegiGoal_
{
  typedef eylem_ornegiGoal_<ContainerAllocator> Type;

  eylem_ornegiGoal_()
    : sinir(0)
    , islem(0)
    , a(0.0)
    , b(0.0)  {
    }
  eylem_ornegiGoal_(const ContainerAllocator& _alloc)
    : sinir(0)
    , islem(0)
    , a(0.0)
    , b(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _sinir_type;
  _sinir_type sinir;

   typedef uint8_t _islem_type;
  _islem_type islem;

   typedef double _a_type;
  _a_type a;

   typedef double _b_type;
  _b_type b;





  typedef boost::shared_ptr< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> const> ConstPtr;

}; // struct eylem_ornegiGoal_

typedef ::ilk_paket::eylem_ornegiGoal_<std::allocator<void> > eylem_ornegiGoal;

typedef boost::shared_ptr< ::ilk_paket::eylem_ornegiGoal > eylem_ornegiGoalPtr;
typedef boost::shared_ptr< ::ilk_paket::eylem_ornegiGoal const> eylem_ornegiGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator1> & lhs, const ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator2> & rhs)
{
  return lhs.sinir == rhs.sinir &&
    lhs.islem == rhs.islem &&
    lhs.a == rhs.a &&
    lhs.b == rhs.b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator1> & lhs, const ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ilk_paket

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5be8905c3eeca2e7c5b767c76d0af813";
  }

  static const char* value(const ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5be8905c3eeca2e7ULL;
  static const uint64_t static_value2 = 0xc5b767c76d0af813ULL;
};

template<class ContainerAllocator>
struct DataType< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ilk_paket/eylem_ornegiGoal";
  }

  static const char* value(const ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#hedef\n"
"int32 sinir\n"
"char islem\n"
"float64 a\n"
"float64 b\n"
;
  }

  static const char* value(const ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sinir);
      stream.next(m.islem);
      stream.next(m.a);
      stream.next(m.b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct eylem_ornegiGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ilk_paket::eylem_ornegiGoal_<ContainerAllocator>& v)
  {
    s << indent << "sinir: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sinir);
    s << indent << "islem: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.islem);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<double>::stream(s, indent + "  ", v.b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ILK_PAKET_MESSAGE_EYLEM_ORNEGIGOAL_H
