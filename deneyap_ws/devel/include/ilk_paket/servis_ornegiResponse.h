// Generated by gencpp from file ilk_paket/servis_ornegiResponse.msg
// DO NOT EDIT!


#ifndef ILK_PAKET_MESSAGE_SERVIS_ORNEGIRESPONSE_H
#define ILK_PAKET_MESSAGE_SERVIS_ORNEGIRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ilk_paket
{
template <class ContainerAllocator>
struct servis_ornegiResponse_
{
  typedef servis_ornegiResponse_<ContainerAllocator> Type;

  servis_ornegiResponse_()
    : sonuc(0.0)  {
    }
  servis_ornegiResponse_(const ContainerAllocator& _alloc)
    : sonuc(0.0)  {
  (void)_alloc;
    }



   typedef double _sonuc_type;
  _sonuc_type sonuc;





  typedef boost::shared_ptr< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> const> ConstPtr;

}; // struct servis_ornegiResponse_

typedef ::ilk_paket::servis_ornegiResponse_<std::allocator<void> > servis_ornegiResponse;

typedef boost::shared_ptr< ::ilk_paket::servis_ornegiResponse > servis_ornegiResponsePtr;
typedef boost::shared_ptr< ::ilk_paket::servis_ornegiResponse const> servis_ornegiResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ilk_paket::servis_ornegiResponse_<ContainerAllocator1> & lhs, const ::ilk_paket::servis_ornegiResponse_<ContainerAllocator2> & rhs)
{
  return lhs.sonuc == rhs.sonuc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ilk_paket::servis_ornegiResponse_<ContainerAllocator1> & lhs, const ::ilk_paket::servis_ornegiResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ilk_paket

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ebbb55f2cf979260315e5400cca901b";
  }

  static const char* value(const ::ilk_paket::servis_ornegiResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ebbb55f2cf97926ULL;
  static const uint64_t static_value2 = 0x0315e5400cca901bULL;
};

template<class ContainerAllocator>
struct DataType< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ilk_paket/servis_ornegiResponse";
  }

  static const char* value(const ::ilk_paket::servis_ornegiResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 sonuc\n"
;
  }

  static const char* value(const ::ilk_paket::servis_ornegiResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sonuc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct servis_ornegiResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ilk_paket::servis_ornegiResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ilk_paket::servis_ornegiResponse_<ContainerAllocator>& v)
  {
    s << indent << "sonuc: ";
    Printer<double>::stream(s, indent + "  ", v.sonuc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ILK_PAKET_MESSAGE_SERVIS_ORNEGIRESPONSE_H
